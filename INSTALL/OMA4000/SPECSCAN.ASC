;************************************************************************
;*                                                                      *
;*  This file (specscan) has scan code for the Thompson Spectro array   *
;*                                                                      *
;*                                                                      *
;************************************************************************

        INCLUDE 'OMACP.INC'
        INCLUDE 'CCD256SP.INC'
        INCLUDE 'HOOKS.INC'
        INCLUDE 'SWITCHER.ASC'

ID_CODE EQU     $F7            ;Thomson 256X1024's Detector ID code

        INCLUDE 'SCCOMMON.ASC' ;Code common to single channel detectors

;************************************************************************
;*                                                                      *
;* Routine: IFM                                                         *
;* Purpose: Trash the blank tracks at the beginning of a CCD frame.     *
;*                                                                      *
;************************************************************************

;*******  Frame Control program  ****************************************

FCSIFM  FC_BLOCK

        WAIT
        LOAD    NO_OP
        LDTRKL  SGROUPS * 2            ! TRACKLEN     ;Double precision

        WAIT
        LOAD    NO_OP
        LDPCNT  DB_PREC                ! PCNT

        WAIT
        LOAD    NO_OP   | RPP_RTP
        LDTCNT  (IGROUPS - 1) * (SGROUPS * 2) - 2    ! TCNT

        WAIT
        LOAD    AN_PROC_BD | ACHANNEL  ! APROC_AB

        WAIT
        LOAD    CLKBIAS_BD | A_CHANNEL ! BIAS_AB

        LDCNTRA 1                      ! I_LEAD_OUTER ;Get to start of frame
        JUNTILA FCSIFM0

        WAIT
        LOAD    NO_OP

        LDCNTRB 0
        JUNTILB FCSIFM2

FCSIFM0 LDCNTRB 1                      ! I_LEAD_INNER

FCSIFM1 WAIT                                     ;Trash leading tracks.
        LOAD    SLN | RPP_RTP          ! SHIFT_SPEED
        JUNTILB FCSIFM1

        WAIT
        LOAD    NO_OP

        GOSUB   CLEANSR                          ;Clean shift-register.

        JUNTILA FCSIFM0

FCSIFM2 LDCNTRB 10
FCSIFMX WAIT
        LOAD    NO_OP
        JUNTILB FCSIFMX

        LDCNTRA 1                      ! I_LEAD_REM
        JUNTILA FCSIFM3

        WAIT
        LOAD    NO_OP

        LDCNTRB 0
        JUNTILB FCSIFM4

FCSIFM3 WAIT
        LOAD    SLN | RPP_RTP  ! SHIFT_SPEED
        GOSUB   CLEANSR                          ;Clean shift-register.
        JUNTILA FCSIFM3

FCSIFM4 WAIT
        LOAD    NO_OP | LPP_LTP | CUE
        END

;********  DMA Control program  *****************************************

DCSIFM  DMA_BLOCK

        WAIT                                    ;Sync FC $ DC Ends.
        LOAD    NOTHING
        END

;****************************************************************

;****************************************************************
;*                                                              *
;* Routine: FCSEFM                                              *
;* Purpose: Trash the blank tracks at the end of a              *
;*          CCD frame                                           *
;*          Cue DC processor for END                            *
;*          Reset XYZ scan generator                            *
;*                                                              *
;****************************************************************

FCSEFM  FC_BLOCK

        WAIT
        LOAD    NO_OP

        LDCNTRA IMAGE1            ! I_TRAIL_OUTER
        JUNTILA FCSEFM0

        WAIT
        LOAD    NO_OP

        LDCNTRB 0
        JUNTILB FCSEFM2

FCSEFM0 LDCNTRB IMAGE1            ! I_TRAIL_INNER

FCSEFM1 WAIT                                    ;Trash trailing tracks.
        LOAD    SLN               ! SHIFT_SPEED
        JUNTILB FCSEFM1

        WAIT
        LOAD    NO_OP

        GOSUB   CLEANSR                         ;Clean shift-register.
        JUNTILA FCSEFM0

FCSEFM2 LDCNTRB 10
FCSEFMX WAIT
        LOAD    NO_OP
        JUNTILB FCSEFMX

        LDCNTRA 1                 ! I_TRAIL_REM
        JUNTILA FCSEFM3
        WAIT
        LOAD    NO_OP
        LDCNTRA 0
        JUNTILA FCSEFM4

FCSEFM3 WAIT                                    ;Trash trailing tracks.
        LOAD    SLN               ! SHIFT_SPEED
        GOSUB   CLEANSR                         ;Clean shift-register.
        JUNTILA FCSEFM3

FCSEFM4 WAIT
        LOAD    CLKBIAS_BD | A_CHANNEL | RS_XYZ ! BIAS_AB

        WAIT
        LOAD    CUE                             ;Sync. handshake
        END

;----------------------------------------------------------------

;********  DMA Control program  *********************************

DCSEFM  DMA_BLOCK
        WAIT                                    ;Sync FC $ DC Ends.
        LOAD    NOTHING
        END

;*****************************************************************

;*****************************************************************
;*                                                               *
;* Routine: FCPIAI                                               *
;* Purpose: Read the PIA port                                    *
;*                                                               *
;*****************************************************************

FCPIAI  FC_BLOCK

        LDCNTRA 40

FCPIAI1 WAIT
        LOAD    NO_OP
        JUNTILA FCPIAI1

        WAIT
        LOAD    PIA_IN | CUE | RPP_RTP

        WAIT
        LOAD    CUE

        END


;********  DMA Control program  *********************************

DCPIAI  DMA_BLOCK

        WAIT
        LOAD    REPLACE | LD_ADDR

        WAIT                                    ;Sync FC $ DC Ends.
        LOAD    NOTHING
        END

;*****************************************************************

;*****************************************************************
;*                                                               *
;* Routine: FCPIAO                                               *
;* Purpose: Write to the PIA port                                *
;*                                                               *
;*****************************************************************

FCPIAO  FC_BLOCK

        LDCNTRA 40

FCPIAO1 WAIT
        LOAD    NO_OP
        JUNTILA FCPIAO1

        WAIT
        LOAD    PIA_OUT | $FF

        WAIT
        LOAD    CUE

        END

;********  DMA Control program  *********************************

DCPIAO  DMA_BLOCK

        WAIT                                    ;Sync FC $ DC Ends.
        LOAD    NOTHING
        END

;*****************************************************************

;*****************************************************************
;*                                                               *
;* Routine: FCSTSC                                               *
;* Purpose: Reset the source comp channel                        *
;*                                                               *
;*****************************************************************

FCSTSC  FC_BLOCK

        LDCNTRA 40

FCSTSC1 WAIT
        LOAD NO_OP | RPP_RTP
        JUNTILA FCSTSC1

        WAIT
        LOAD STSC                                ;Reset source comp channel

        WAIT
        LOAD NO_OP | CUE                         ; Sync DC end
        END

;********  DMA Control program  *********************************

DCSTSC  DMA_BLOCK

        WAIT
        LOAD NOTHING

        END

;*****************************************************************

;*****************************************************************
;*                                                               *
;* Routine: FCSCMP                                               *
;* Purpose: Read the source comp channel                         *
;*                                                               *
;*****************************************************************

FCSCMP  FC_BLOCK                  ! FC_MODE_SC

        LDCNTRA 80

FCSC1   WAIT
        LOAD NO_OP | RPP_RTP
        JUNTILA FCSC1

        WAIT
        LOAD SC | CUE                            ; Read/store source comp

        WAIT
        LOAD NO_OP | CUE                         ; Sync DC end
        END

;********  DMA Control program  *********************************

DCSCMP  DMA_BLOCK                 !DC_MODE_SC
        WAIT                                     ;Sync FC $ DC Ends.
        LOAD REPLACE | LD_ADDR

        WAIT
        LOAD NOTHING

        END

;********  DMA Control program  *********************************

DCASCMP DMA_BLOCK
        WAIT                                     ;Sync FC $ DC Ends.
        LOAD AD_P_MEM | LD_ADDR

        WAIT
        LOAD NOTHING

        END

;*****************************************************************

;****************************************************************
;*                                                              *
;* Routine: FCSUR                                               *
;* Purpose: Read from the CCD using simple mode; uniform tracks *
;*                                                              *
;****************************************************************

;*******  Frame Control program  ********************************

FCSUR   FC_BLOCK                  ! UT_SIMPLE

        LDCNTRA IDELTA            ! Y_DELTA     ;Height of track

FCSURA  WAIT
        LOAD    SLN               ! SHIFT_SPEED ;Shift remaining lines
        JUNTILA FCSURA

        GOSUB   RSSMXU            ! SER_ACQ     ;Read serial register

        WAIT
        LOAD    NO_OP | ITP | CUE               ;Prepare for next track
        END

;*************************************************************************
;*                                                                       *
;* Routine: RSSMXU                                                       *
;* Purpose: Read serial register for simple mode; uniform points, dX = 1 *
;*                                                                       *
;*************************************************************************

RSSMXU  FC_BLOCK                  ! USSLICE_OUT_MX
        LDCNTRA SERIAL0 - 1       ! S_IGNORE_START ;Offset to start of track

RSSMXUA WAIT                                    ;Ignore leading shift reg.
        LOAD    TP
        JUNTILA RSSMXUA

        WAIT
        LOAD    NPA               ! PIXTIME_NP  ;Ease transition for hardware

        WAIT
        LOAD    NPA | RPP | SET_B | CUE ! PIXTIME_NP ;Acquire first pixel

        LDCNTRA SGROUPS           ! SCNT
        JUNTILA RSSMXUB

        WAIT
        LOAD    NO_OP

        LDCNTRB SERIAL1           ! S_IGNORE_END
        JUNTILB RSSMXUC

RSSMXUB WAIT
        LOAD    NPA | IPP | CUE   ! PIXTIME_NP   ;Get the data points.
        JUNTILA RSSMXUB

        LDCNTRB SERIAL1           ! S_IGNORE_END

RSSMXUC WAIT                                     ;Ignore trailing shift reg.
        LOAD    TP | RS_B
        JUNTILB RSSMXUC

        RETURN

;***********************************************************************
;*                                                                     *
;* Routine: RSSDXU                                                     *
;* Purpose: Read serial register for simple mode; uniform points, dX>1 *
;*                                                                     *
;***********************************************************************

RSSDXU  FC_BLOCK                  ! USSLICE_OUT_DX
        LDCNTRA SERIAL0 - 1       ! S_IGNORE_START ;Offset to start of track

RSSDXUA WAIT                                    ;Ignore leading shift reg.
        LOAD    TP
        JUNTILA RSSDXUA

        WAIT
        LOAD    NPA               ! PIXTIME_NP  ;Ease transition for hardware

        LDCNTRB SDELTA            ! X_DELTA     ;Get delta for serial
        JUNTILB RSSDXUB                         ;Subtract one!

RSSDXUB WAIT                                    ;Dump pixels in group
        LOAD    DPX
        JUNTILB RSSDXUB

RSSDXUC WAIT
        LOAD    NPA | RPP | SET_B | CUE ! PIXTIME_NP ;Acquire first pixel

        LDCNTRA SGROUPS           ! SCNT
        JUNTILA RSSDXUX

        WAIT
        LOAD    NO_OP

        LDCNTRB SERIAL1           ! S_IGNORE_END
        JUNTILB RSSDXUG

RSSDXUX WAIT
        LOAD    NO_OP

RSSDXUD LDCNTRB SDELTA            ! X_DELTA      ;Get remaining groups
        JUNTILB RSSDXUE

RSSDXUE WAIT                                     ;Dump pixels in group
        LOAD    DPX
        JUNTILB RSSDXUE

RSSDXUF WAIT
        LOAD    NPA | IPP | CUE   ! PIXTIME_NP   ;Get the data points.
        JUNTILA RSSDXUD

        LDCNTRB SERIAL1           ! S_IGNORE_END

RSSDXUG WAIT                                     ;Ignore trailing shift reg.
        LOAD    TP | RS_B
        JUNTILB RSSDXUG

        RETURN

;*******  DMA Control program  **********************************

DCSRAT  DMA_BLOCK                  ! DC_MODE_ADD
        WAIT
        LOAD    AD_P_MEM | LD_ADDR

        LDCNTRB SGROUPS            ! SCNT        ; If SGROUPS > 1
        JUNTILB DCSRAT1                          ; Will take the branch

        LDCNTRB 0                                ; else jump over the loop
        JUNTILB DCSRAT2

DCSRAT1 WAIT
        LOAD    AD_P_MEM
        JUNTILB DCSRAT1

DCSRAT2 WAIT                                     ;Sync. FC End
        LOAD    NOTHING
        END

;*******  DMA Control program  **********************************

DCSRATR DMA_BLOCK                 ! DC_MODE_REP

        WAIT
        LOAD    REPLACE | LD_ADDR

        LDCNTRB SGROUPS           ! SCNT         ; If SGROUPS > 1
        JUNTILB DCSRAT1R                         ; Will take the branch

        LDCNTRB 0                                ; else jump over the loop
        JUNTILB DCSRAT2R

DCSRAT1R WAIT
        LOAD    REPLACE
        JUNTILB DCSRAT1R

DCSRAT2R WAIT                                     ;Sync. FC End
        LOAD    NOTHING
        END

;*******  DMA Control program  **********************************

DCSIGN  DMA_BLOCK                 ! DC_MODE_IGN
        WAIT
        LOAD    NOTHING | LD_ADDR

        LDCNTRB SGROUPS           ! SCNT         ; If SGROUPS > 1
        JUNTILB DCSIG1                           ; Will take the branch

        LDCNTRB 0                                ; else jump over the loop
        JUNTILB DCSIG2

DCSIG1  WAIT
        LOAD    NOTHING
        JUNTILB DCSIG1

DCSIG2  WAIT                                     ;Sync. FC End
        LOAD    NOTHING
        END

;*******  DMA Control program  **********************************

DCSSUB  DMA_BLOCK                  ! DC_MODE_SUB
        WAIT
        LOAD    AD_M_BG | LD_ADDR

        LDCNTRB SGROUPS            ! SCNT        ; If SGROUPS > 1
        JUNTILB DCSSUB1                          ; Will take the branch

        LDCNTRB 0                                ; else jump over the loop
        JUNTILB DCSSUB2

DCSSUB1 WAIT
        LOAD    AD_M_BG
        JUNTILB DCSSUB1

DCSSUB2 WAIT                                     ;Sync. FC End
        LOAD    NOTHING
        END

;****************************************************************

;****************************************************************
;*                                                              *
;* Routine: FCCUR                                               *
;* Purpose: Read one slice from the CCD using classic mode      *
;*          uniform points                                      *
;*                                                              *
;****************************************************************

;*******  Frame Control program  ********************************

FCCUR   FC_BLOCK                  ! UT_CLASSIC

        LDCNTRA IDELTA            ! X_DELTA     ;Height of slice

FCCURA  WAIT
        LOAD    SLN               ! SHIFT_SPEED ;Shift remaining lines
        JUNTILA FCCURA

FCCURB  GOSUB   RCSERU            ! SER_ACQ     ;Read serial register

        WAIT
        LOAD    NO_OP | IPP | CUE               ;Prepare for next slice
        END


;**************************************************************************
;*                                                                        *
;* Routine:          RCSERU                                               *
;* Purpose: Read serial register for classic mode; uniform tracks, dX = 1 *
;*                                                                        *
;**************************************************************************

RCSERU  FC_BLOCK                  ! UCSLICE_OUT_MX
        LDCNTRA SERIAL0 - 1       ! S_IGNORE_START ;Offset to start of track

RCSERUA WAIT                                    ;Ignore leading shift reg.
        LOAD    TP
        JUNTILA RCSERUA

        WAIT
        LOAD    NPA               ! PIXTIME_NP  ;Ease transition for hardware

RCSERUX WAIT
        LOAD    NPA | RTP | SET_B | CUE ! PIXTIME_NP ;Acquire first pixel

        LDCNTRA IGROUPS           ! SCNT         ;Check if more groups
        JUNTILA RCSERUY                          ;If yes, go read them

        LDCNTRB SERIAL1           ! S_IGNORE_END ;Else goto end
        JUNTILB RCSERUE

RCSERUY WAIT
        LOAD    NPA | ITP | CUE   ! PIXTIME_NP   ;Get the data points.
        JUNTILA RCSERUY

        LDCNTRB SERIAL1           ! S_IGNORE_END

RCSERUE WAIT                                     ;Ignore trailing shift reg.
        LOAD    TP | RS_B
        JUNTILB RCSERUE
        RETURN

;*************************************************************************
;*                                                                       *
;* Routine: RCSDXU                                                       *
;* Purpose: Read serial register for classic mode; uniform tracks, dX > 1*
;*                                                                       *
;*************************************************************************

RCSDXU  FC_BLOCK                  ! UCSLICE_OUT_DX
        LDCNTRA SERIAL0 - 1       ! S_IGNORE_START ;Offset to start of track

RCSDXUA WAIT                                    ;Ignore leading shift reg.
        LOAD    TP
        JUNTILA RCSDXUA

        WAIT
        LOAD    NPA               ! PIXTIME_NP  ;Ease transition for hardware

        LDCNTRB SDELTA            ! Y_DELTA     ;Get delta
        JUNTILB RCSDXUB                         ;Subtract 1!

RCSDXUB WAIT                                    ;Dump pixels in group
        LOAD    DPX
        JUNTILB RCSDXUB

RCSDXUX WAIT
        LOAD    NPA | RTP | SET_B | CUE ! PIXTIME_NP ;Acquire first pixel

        LDCNTRA IGROUPS           ! SCNT         ;Check if more groups
        JUNTILA RCSDXUX                          ;If yes, go read them

        WAIT
        LOAD    NO_OP

        LDCNTRB SERIAL1           ! S_IGNORE_END ;Else goto end
        JUNTILB RCSDXUE

RCSDXUX WAIT
        LOAD    NO_OP

RCSDXUC LDCNTRB SDELTA            ! Y_DELTA      ;Get delta for groups
        JUNTILB RCSDXUD                          ;Subtract 1!

RCSDXUD WAIT                                     ;Dump pixels in groups
        LOAD    DPX
        JUNTILB RCSDXUD

        WAIT
        LOAD    NPA | ITP | CUE   ! PIXTIME_NP   ;Get the data points.
        JUNTILA RCSDXUC

        LDCNTRB SERIAL1           ! S_IGNORE_END

RCSDXUE WAIT                                     ;Ignore trailing shift reg.
        LOAD    TP | RS_B
        JUNTILB RCSDXUE
        RETURN

        INCLUDE 'ALCOMMON.ASC'  ;Remaining code common to all detectors
