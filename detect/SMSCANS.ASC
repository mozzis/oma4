;************************************************************************
;*                                                                      *
;*  This file (smscans) has scan code for the Split-mode detector       *
;*                                                                      *
;*                                                                      *
;************************************************************************

        INCLUDE 'OMACP.INC'                 ;Definitions for the ASIC.
        INCLUDE 'CCD512TS.INC'              ;Definitions for Thompsons SM CCD.
        INCLUDE 'HOOKS.INC'

ID_CODE EQU $FE

LCICNFG EQU 0 ;

;************************************************************************
;*                                                                      *
;* Routine: INIT                                                        *
;* Purpose: To initialise the FC processor and the detector,            *
;*          and to synchronise with the DMA and DAC processors.         *
;*                                                                      *
;************************************************************************

;********  Frame Control program  ***************************************

FCINIT  FC_BLOCK

        WAIT
        LDCFG   DCADDR | SPLTMOD | XMIT14 | REC18 | RECTRIG | RECTEMP
        LDTRKL  NUMSERIAL                       ! TRACKLEN
        LDPCNT  DB_PREC | NUMSERIAL * 2         ! PCNT

        WAIT
        LOAD    AD_BD | MS10 ! SCITC_SET

        WAIT
        LOAD    CLKBIAS_BD | A_CHANNEL | RS_XYZ ! BIAS_AB

        WAIT
        LOAD    SHUTTER_BD | INT_SHUTTER        ! LCI_CONFIG

        WAIT
        LOAD    AN_PROC_BD | ACHANNEL           ! APROC_AB

        WAIT
        LOAD    DET_CNTL_BD | NO_LOOPBACK 

        LDCNTRA 100

FCINT1  WAIT                                    ;Send NOPs to kill time.
        LOAD    NO_OP
        JUNTILA FCINT1

        WAIT                                    ;Sync FC $ DC Ends.
        LOAD    NO_OP | CUE
        END

;********  DMA Control program  ****************************************

DCSYNC  DMA_BLOCK

        WAIT                                    ;Sync FC $ DC Ends.
        LOAD   NOTHING
        END

;************************************************************************
;*                                                                      *
;* Routine: IDNT                                                        *
;* Purpose: To identify the detector hardware attached to the           *
;*          controller.                                                 *
;*                                                                      *
;************************************************************************

;*
;******************************************************************
;*

FCIDNT  FC_BLOCK

        WAIT
        LOAD    DET_CNTL_BD | NO_LOOPBACK

        WAIT
        LOAD    SHUTTER_BD | INT_SHUTTER  | CUE | RPP_RTP

        WAIT
        LOAD    DET_CNTL_BD | NO_LOOPBACK | CUE | IPP

        LDCNTRA 100

FCIDNT1 WAIT                                    ;Send NOPs to kill time.
        LOAD    NO_OP
        JUNTILA FCIDNT1

        WAIT                                    ;Sync FC $ DC Ends.
        LOAD    NO_OP | CUE
        END

;************************************************************************
;*                                                                      *
;* Routine: IDX                                                         *
;* Purpose: To identify a single channel controller                     *
;*                                                                      *
;************************************************************************

;*
;******************************************************************
;*
 FCIDX   FC_BLOCK
 
        WAIT
        LOAD    NO_OP
        LDCFG   DCADDR | QNS | XMIT13 | REC18 | RECTRIG | RECTEMP
        WAIT
        LOAD    NO_OP
        LDTRKL  NUMSERIAL
        WAIT
        LOAD    NO_OP
        LDPCNT  DB_PREC

        WAIT                                    ;Aux Bus Addrs. for TSC:
        LOAD    $1100 | MS10                    ;1100 is A/D Board

        WAIT
        LOAD    $1400 | A_CHANNEL | RS_XYZ      ;1400 is Clock/Bias

        WAIT
        LOAD    $1600 | INT_SHUTTER             ;1600 is Shutter/Pulser

        WAIT
        LOAD    $1000 | ACHANNEL                ;1000 is Analog Processor
                                                
        WAIT
        LOAD    $1F00 | NO_LOOPBACK             ;1F00 is Detector Controller

        LDCNTRA 100

FCIDX1  WAIT                                    ;Send NOPs to kill time.
        LOAD    NO_OP
        JUNTILA FCIDX1

        WAIT
        LOAD    $1600 | INT_SHUTTER  | CUE | RPP_RTP

        WAIT
        LOAD    $1F00 | NO_LOOPBACK | CUE | IPP

        LDCNTRA 100

FCIDX2  WAIT                                    ;Send NOPs to kill time.
        LOAD    NO_OP
        JUNTILA FCIDX2

        WAIT                                    ;Sync FC $ DC Ends.
        LOAD    NO_OP | CUE
        END

;********  DMA Control program  ****************************************

DCIDNT  DMA_BLOCK

        WAIT
        LOAD   REPLACE | LD_ADDR                ;Store detector ID

        WAIT
        LOAD   REPLACE                          ;Store Shutter ID

        WAIT                                    ;Sync FC $ DC Ends.
        LOAD   NOTHING
        END

;******************************************************************
;*                                                                *
;* This block is (I hope!) never executed.  The LDCNTRA instrux   *
;* are there so that the counter values will be in the right      *
;* place for get_ASIC_counter.  The counter values give info      *
;* about the intended use of this ASIC program file, such as the  *
;* intended detector's ACITVEX and ACTIVEY and identification     *
;* byte.                                                          *
;*                                                                *
;******************************************************************

FCCONF  FC_BLOCK
        LDCNTRA  NUMIMAGE    ! IACTIVE          ;ActiveY
        LDCNTRA  NUMSERIAL   ! SACTIVE          ;ActiveX
        LDCNTRA  IMAGE_LEAD  ! DUMYLD
        LDCNTRA  IMAGE_LAST  ! DUMYTR
        LDCNTRA  SERIAL_LEAD ! DUMXLD
        LDCNTRA  SERIAL_LAST ! DUMXTR
        LDCNTRA  ID_CODE     ! DET_ID

        END


;****************************************************************
CLEANSR FC_BLOCK                  ! SER_CLEAN
        LDCNTRB TOTAL_SERIAL      ! S_TOTAL

CLEAN1  WAIT                                     ;Trash all data points.
        LOAD    TP
        JUNTILB CLEAN1

        WAIT
        LOAD    TPS
        WAIT
        LOAD    TPS

        RETURN

;****************************************************************

;************************************************************************
;*                                                                      *
;* Routine: IFM                                                         *
;* Purpose: Trash the blank tracks at the beginning of a CCD frame.     *
;*                                                                      *
;************************************************************************

;*******  Frame Control program  ****************************************

FCSIFM  FC_BLOCK

        WAIT
        LOAD    NO_OP
        LDTRKL  SGROUPS * 2                          ! TRACKLEN ;Double prec.

        WAIT
        LOAD    NO_OP
        LDPCNT  DB_PREC | SGROUPS * 2                ! PCNT

        WAIT
        LOAD    NO_OP
        LDTCNT  (IGROUPS - 1) * (SGROUPS * 2) - 2    ! TCNT

        WAIT
        LOAD    AN_PROC_BD | ACHANNEL                ! APROC_AB

        WAIT
        LOAD    CLKBIAS_BD | BOTH_CHANNELS           ! BIAS_AB

        LDCNTRA 1                      ! I_LEAD_OUTER ;Get to start of frame
        JUNTILA FCSIFM0

        WAIT
        LOAD    NO_OP 

        LDCNTRB 0
        JUNTILB FCSIFM2

FCSIFM0 LDCNTRB 1                      ! I_LEAD_INNER

FCSIFM1 WAIT                                     ;Trash leading tracks.
        LOAD    SLF | RPP_RTP  ! SHIFT_SPEED          
        JUNTILB FCSIFM1

        WAIT
        LOAD    NO_OP 

        GOSUB   CLEANSR               ;Clean shift-register.

        JUNTILA FCSIFM0

FCSIFM2 LDCNTRB 10
FCSIFMX WAIT
        LOAD    NO_OP
        JUNTILB FCSIFMX

        LDCNTRA 1                      ! I_LEAD_REM
        JUNTILA FCSIFM3

        WAIT
        LOAD    NO_OP 

        LDCNTRB 0
        JUNTILB FCSIFM4

FCSIFM3 WAIT
        LOAD    SLF | RPP_RTP  ! SHIFT_SPEED
        GOSUB   CLEANSR                          ;Clean shift-register.
        JUNTILA FCSIFM3

FCSIFM4 WAIT
        LOAD    NO_OP | LPP_LTP | CUE
        END

;********  DMA Control program  *****************************************

DCSIFM  DMA_BLOCK

        WAIT                                    ;Sync FC $ DC Ends.
        LOAD    NOTHING
        END

;****************************************************************

;****************************************************************
;*                                                              *
;* Routine: FCSEFM                                              *
;* Purpose: Trash the blank tracks at the end of a              *
;*          CCD frame                                           *
;*          Cue DC processor for END                            *
;*          Reset XYZ scan generator                            *
;*                                                              *
;****************************************************************

FCSEFM  FC_BLOCK

        WAIT
        LOAD    NO_OP 

        LDCNTRA IMAGE1            ! I_TRAIL_OUTER
        JUNTILA FCSEFM0

        WAIT
        LOAD    NO_OP

        LDCNTRB 0
        JUNTILB FCSEFM2

FCSEFM0 LDCNTRB IMAGE1            ! I_TRAIL_INNER

FCSEFM1 WAIT                                    ;Trash trailing tracks.
        LOAD    SLF               ! SHIFT_SPEED
        JUNTILB FCSEFM1

        WAIT
        LOAD    NO_OP 

        GOSUB   CLEANSR                         ;Clean shift-register.
        JUNTILA FCSEFM0

FCSEFM2 LDCNTRB 10
FCSEFMX WAIT
        LOAD    NO_OP   
        JUNTILB FCSEFMX

        LDCNTRA 1                 ! I_TRAIL_REM
        JUNTILA FCSEFM3
        WAIT
        LOAD    NO_OP
        LDCNTRA 0
        JUNTILA FCSEFM4

FCSEFM3 WAIT                                    ;Trash trailing tracks.
        LOAD    SLF               ! SHIFT_SPEED
        GOSUB   CLEANSR                         ;Clean shift-register.
        JUNTILA FCSEFM3

FCSEFM4 WAIT
        LOAD    CLKBIAS_BD | A_CHANNEL | RS_XYZ ! BIAS_AB

        WAIT
        LOAD    NO_OP | CUE              ;Sync. handshake
        END

;----------------------------------------------------------------

;********  DMA Control program  *********************************

DCSEFM  DMA_BLOCK
        WAIT                                    ;Sync FC $ DC Ends.
        LOAD    NOTHING
        END

;*****************************************************************

;*****************************************************************
;*                                                               *
;* Routine: FCPIAI                                               *
;* Purpose: Read the PIA port                                    *
;*                                                               *
;*****************************************************************

FCPIAI  FC_BLOCK

        LDCNTRA 40

FCPIAI1 WAIT
        LOAD    NO_OP
        JUNTILA FCPIAI1

        WAIT
        LOAD    PIA_IN | CUE | RPP_RTP

        WAIT
        LOAD    CUE
        
        END


;********  DMA Control program  *********************************

DCPIAI  DMA_BLOCK

        WAIT
        LOAD    REPLACE | LD_ADDR
        
        WAIT                                    ;Sync FC $ DC Ends.
        LOAD    NOTHING
        END

;*****************************************************************

;*****************************************************************
;*                                                               *
;* Routine: FCPIAO                                               *
;* Purpose: Write to the PIA port                                *
;*                                                               *
;*****************************************************************

FCPIAO  FC_BLOCK

        LDCNTRA 40

FCPIAO1 WAIT
        LOAD    NO_OP
        JUNTILA FCPIAO1

        WAIT
        LOAD    PIA_OUT | $FF

        WAIT
        LOAD    CUE
        
        END

;********  DMA Control program  *********************************

DCPIAO  DMA_BLOCK

        WAIT                                    ;Sync FC $ DC Ends.
        LOAD    NOTHING
        END

;*****************************************************************

;*****************************************************************
;*                                                               *
;* Routine: FCSTSC                                               *
;* Purpose: Reset the source comp channel                        *
;*                                                               *
;*****************************************************************

FCSTSC  FC_BLOCK

        LDCNTRA 40

FCSTSC1 WAIT
        LOAD NO_OP | RPP_RTP
        JUNTILA FCSTSC1

        WAIT
        LOAD STSC                                ;Reset source comp channel

        WAIT
        LOAD NO_OP | CUE                         ; Sync DC end
        END

;********  DMA Control program  *********************************

DCSTSC  DMA_BLOCK

        WAIT
        LOAD NOTHING

        END

;*****************************************************************

;*****************************************************************
;*                                                               *
;* Routine: FCSCMP                                               *
;* Purpose: Read the source comp channel                         *
;*                                                               *
;*****************************************************************

FCSCMP  FC_BLOCK                  ! FC_MODE_SC

        LDCNTRA 80                              ; Give DAC time to act

FCSC1   WAIT
        LOAD NO_OP | RPP_RTP
        JUNTILA FCSC1

        WAIT
        LOAD SC1 | CUE                           ; Read/store source comp

        WAIT
        LOAD SC2 | CUE                           ; Read/store source comp

        WAIT
        LOAD NO_OP | CUE                         ; Sync DC end
        END

;********  DMA Control program  *********************************

DCSCMP  DMA_BLOCK                 !DC_MODE_SC

        WAIT                                     ;Sync FC $ DC Ends.
        LOAD REPLACE | LD_ADDR

        WAIT                                     ;Sync FC $ DC Ends.
        LOAD NOTHING

        WAIT
        LOAD NOTHING

        END

;********  DMA Control program  *********************************

DCASCMP DMA_BLOCK
        WAIT                                     ;Sync FC $ DC Ends.
        LOAD AD_P_MEM | LD_ADDR

        WAIT
        LOAD NOTHING

        WAIT                                     ;Sync FC $ DC Ends.
        LOAD NOTHING

        END

;*****************************************************************

;****************************************************************
;*                                                              *
;* Routine: FCSUR                                               *
;* Purpose: Read from the CCD using simple mode; uniform tracks *
;*                                                              *
;****************************************************************

;*******  Frame Control program  ********************************

FCSUR   FC_BLOCK                  ! UT_SIMPLE

        LDCNTRA IDELTA            ! Y_DELTA     ;Height of track

FCSURA  WAIT
        LOAD    SLF               ! SHIFT_SPEED ;Shift remaining lines
        JUNTILA FCSURA

        GOSUB   RSSMXU            ! SER_ACQ     ;Read serial register

        WAIT
        LOAD    ITP | CUE                       ;Prepare for next track
        END

;***********************************************************************
;*                                                                     *
;* Routine: FCSTRK                                                     *
;* Purpose: Shift the CCD without reading for streak camera mode       *
;*                                                                     *
;***********************************************************************

;*******  Frame Control program  ********************************

FCSTRK  FC_BLOCK

        WAIT
        LOAD    CLKBIAS_BD | RS_XYZ | A_CHANNEL ! BIAS_AB

        LDCNTRB 1                 ! T0_COUNTER;
FCSTRKA LDCNTRA IDELTA            ! Y_DELTA     ;Height of track

FCSTRKB WAIT
        LOAD    SLF | SET_B       ! SHIFT_SPEED ;Shift remaining lines
        JUNTILA FCSTRKB

        JUNTILB FCSTRKA                         ;Shift remaining tracks

        LDCNTRA 40                              ;Give DAC time to catch up

        WAIT
FCSTRKC LOAD   NO_OP | RTP | RS_B
        JUNTILA FCSTRKC

        WAIT
        LOAD    NO_OP | CUE                      ;Signal DC processor
        END

;***********************************************************************
;*                                                                     *
;* Routine: FCSTROT                                                    *
;* Purpose: Shift the CCD ONTRIG without reading for streak camera mode*
;*                                                                     *
;***********************************************************************

;*******  Frame Control program  ********************************

FCSTROT FC_BLOCK

        WAIT
        LOAD    CLKBIAS_BD | RS_XYZ | A_CHANNEL ! BIAS_AB

        LDCNTRB 1                 ! T0_COUNTER;

FCSTROA WAIT
        LOAD    NO_OP | ARMTRG | SET_B          ;Reset trigger input

FCSTROB WAIT
        LOAD    NO_OP                           ;Do nothing (except)
        JIFNOT  FCSTROB                         ;Wait for trigger input

FCSTROC LDCNTRA IDELTA            ! Y_DELTA     ;Height of track

FCSTROD WAIT
        LOAD    SLF | RS_B        ! SHIFT_SPEED ;Shift remaining lines
        JUNTILA FCSTROD

        JUNTILB FCSTROC                         ;Shift remaining tracks

        LDCNTRA 40                              ;Give DAC time to catch up
        WAIT
FCSTROE LOAD   NO_OP | RTP
        JUNTILA FCSTROE

        WAIT
        LOAD    NO_OP | CUE                     ;Signal DC processor
        END

;****************************************************
; DMA Program
;*****************************************************

DCSTRK  DMA_BLOCK

        WAIT
        LOAD NOTHING
        END

;***********************************************************************
;*                                                                     *
;* Routine: FCSPDA                                                     *
;* Purpose: Shift the CCD without reading for PDA emulation mode       *
;*                                                                     *
;***********************************************************************

;*******  Frame Control program  ********************************

FCSPDA  FC_BLOCK

        WAIT
        LOAD    CLKBIAS_BD | RS_XYZ | A_CHANNEL ! BIAS_AB

FCSPDAA LDCNTRA IDELTA            ! Y_DELTA     ;Height of track

FCSPDAB WAIT
        LOAD    SLF               ! SHIFT_SPEED ;Shift remaining lines
        JUNTILA FCSPDAB

        GOSUB   RSSMXU            ! SER_ACQ     ;Read serial register

        JUNTILB FCSPDAA

        WAIT
        LOAD    NO_OP | CUE                     ;Signal DC processor
        END

;********  DMA Control program  *********************************

DCSPDA  DMA_BLOCK
        WAIT                                    ;Sync FC $ DC Ends.
        LOAD   NOTHING | LD_ADDR
        END

;*************************************************************************
;*                                                                       *
;* Routine: RSSMXU                                                       *
;* Purpose: Read serial register for simple mode; uniform points, dX = 1 *
;*                                                                       *
;*************************************************************************

RSSMXU  FC_BLOCK                  ! USSLICE_OUT_MX
        LDCNTRA SERIAL0 - 1       ! S_IGNORE_START ;Offset to start of track

RSSMXUA WAIT                                    ;Ignore leading shift reg.
        LOAD    TPS
        JUNTILA RSSMXUA

        WAIT
        LOAD    NP1F                            ;Transition for hardware

        WAIT
        LOAD    NP2F

        WAIT
        LOAD    NP1F | RPP | SET_B | CUE ! PIXTIME_NP ;Acquire first A pixel

        WAIT
        LOAD    NP2F | LPP | SET_B | CUE ! SEC_CUE ;Acquire first B pixel

        LDCNTRA SGROUPS - 1       ! SM_SGROUPS
                           
RSSMXUB WAIT
        LOAD    NP1F | IPP | CUE  ! PIXTIME_NP  ;Get the data points.
        WAIT
        LOAD    NP2F | DPP | CUE  ! SEC_CUE
        JUNTILA RSSMXUB

        WAIT
        LOAD    TPS      
        WAIT                                  ;Trash pixel and flush pipe-line
        LOAD    TPS | DTP                     ;Point DMA to next track

        LDCNTRB SERIAL1           ! S_IGNORE_END

RSSMXUC WAIT                                  ;Ignore trailing shift reg.
        LOAD    TPS | RS_B
        JUNTILB RSSMXUC

        RETURN

;*************************************************************************
;*                                                                       *
;* Routine: RSSRDXU                                                      *
;* Purpose: Read serial register for simple mode; uniform points, dX > 1 *
;*                                                                       *
;*************************************************************************

RSSDXU  FC_BLOCK                  ! USSLICE_OUT_DX
        LDCNTRA SERIAL0 - 1       ! S_IGNORE_START ;Offset to start of track

RSSDXUA WAIT                                    ;Ignore leading shift reg.
        LOAD    TP
        JUNTILA RSSDXUA

        WAIT
        LOAD    NP1F                            ;Transition for hardware

        WAIT
        LOAD    NP2F

        LDCNTRB SDELTA            ! X_DELTA     ;Get first group

        WAIT                                    ;Dump pixels in group
        LOAD    FLUSH

        JUNTILB RSSDXUB                         ;Subtract one!

RSSDXUB WAIT
        LOAD    DPXS

        JUNTILB RSSDXUC

        GOTOB   RSSDXUE

RSSDXUC WAIT
        LOAD    DPXS

        JUNTILB RSSDXUD

        GOTOB   RSSDXUE

RSSDXUD WAIT
        LOAD    DPX
        JUNTILB RSSDXUD

RSSDXUE WAIT
        LOAD    NP1F | RPP | SET_B | CUE ! PIXTIME_NP ;Acquire first A pixel

        WAIT
        LOAD    NP2F | LPP | SET_B | CUE ! SEC_CUE ;Acquire first B pixel

        LDCNTRA SGROUPS - 1       ! SM_SGROUPS     ;See if any more pixels
                           
RSSDXUF LDCNTRB SDELTA            ! X_DELTA     ;Get size of remaining groups

        WAIT                                    ;Pause before DPX's
        LOAD    FLUSH

        JUNTILB RSSDXUG                         ;Subtract one from groupsize!

RSSDXUG WAIT                                    ;Next lines deal with cases
        LOAD    DPXS                            ;of dX = 2, 3, or >3 
                                                ;first two must be DPXS
        JUNTILB RSSDXUX                         ;If dX > 2 goto DXUX

        GOTOB   RSSDXUH                         ;Else goto DXUH

RSSDXUX WAIT
        LOAD    DPXS

        JUNTILB RSSDXUY                         ;If dX > 3 goto DXUY

        GOTOB   RSSDXUH                         ;Else goto DXUH

RSSDXUY WAIT                                    ;Dump from grp pix 3 on up
        LOAD    DPX                             ;using DPX
        JUNTILB RSSDXUY

RSSDXUH WAIT
        LOAD    NP1F | IPP | CUE  ! PIXTIME_NP  ;Get the data points.
        WAIT
        LOAD    NP2F | DPP | CUE  ! SEC_CUE
        JUNTILA RSSDXUF

        WAIT
        LOAD    TPS      
        WAIT                                  ;Trash pixel and flush pipe-line
        LOAD    TPS | DTP                     ;Point DMA to next track

        LDCNTRB SERIAL1           ! S_IGNORE_END

RSSDXUI WAIT                                  ;Ignore trailing shift reg.
        LOAD    TP | RS_B
        JUNTILB RSSDXUI

        RETURN

;*******  DMA Control program  **********************************

DCSRAT  DMA_BLOCK                 ! DC_MODE_ADD
        WAIT
        LOAD    AD_P_MEM | LD_ADDR

        LDCNTRA (SGROUPS * 2) - 1 ! S_GROUP_MIN1 ;take * 2 for splitmode

DCSRAT1 WAIT
        LOAD    AD_P_MEM
        JUNTILA DCSRAT1

        WAIT                                     ;Sync. FC End
        LOAD    NOTHING
        END

;*******  DMA Control program  **********************************

DCSRATR DMA_BLOCK                 ! DC_MODE_REP

        WAIT
        LOAD    REPLACE | LD_ADDR

        LDCNTRA (SGROUPS * 2) - 1 ! S_GROUP_MIN1 ;take * 2 for splitmode

DCSRAT1R WAIT
        LOAD    REPLACE
        JUNTILA DCSRAT1R

        WAIT                                     ;Sync. FC End
        LOAD    NOTHING
        END

;*******  DMA Control program  **********************************

DCSIGN  DMA_BLOCK                 ! DC_MODE_IGN
        WAIT
        LOAD    NOTHING | LD_ADDR

        LDCNTRA (SGROUPS * 2) - 1 ! S_GROUP_MIN1 ;take * 2 for splitmode

DCSIG1  WAIT
        LOAD    NOTHING
        JUNTILA DCSIG1

        WAIT                                     ;Sync. FC End
        LOAD    NOTHING
        END

;*******  DMA Control program  **********************************

DCSSUB  DMA_BLOCK                  ! DC_MODE_SUB
        WAIT
        LOAD    AD_M_BG | LD_ADDR

        LDCNTRA (SGROUPS * 2) - 1  ! S_GROUP_MIN1 ;take * 2 for splitmode

DCSSUB1 WAIT
        LOAD    AD_M_BG
        JUNTILA DCSSUB1

        WAIT                                     ;Sync. FC End
        LOAD    NOTHING
        END

;****************************************************************

;****************************************************************
;*                                                              *
;* Routine: FCCUR                                               *
;* Purpose: Read one slice from the CCD using classic mode      *
;*          uniform points                                      *
;*                                                              *
;****************************************************************

;*******  Frame Control program  ********************************

FCCUR   FC_BLOCK                  ! UT_CLASSIC

        WAIT
        LOAD    CLKBIAS_BD | A_CHANNEL ! BIAS_AB

        LDCNTRA IDELTA            ! X_DELTA     ;Height of slice

FCCURA  WAIT
        LOAD    SLF               ! SHIFT_SPEED ;Shift remaining lines
        JUNTILA FCCURA

FCCURB  GOSUB   RCSMXU            ! SER_ACQ     ;Read serial register

        WAIT
        LOAD    IPP | CUE                       ;Prepare for next slice
        END


;**************************************************************************
;*                                                                        *
;* Routine: RCSMXU                                                        *
;* Purpose: Read serial register for classic mode; uniform points, dX = 1 *
;*                                                                        *
;**************************************************************************

RCSMXU  FC_BLOCK                  ! UCSLICE_OUT_MX
        LDCNTRA SERIAL0 - 1       ! S_IGNORE_START ;Offset to start of track

RCSMXUA WAIT                                    ;Ignore leading shift reg.
        LOAD    TP
        JUNTILA RCSMXUA

        WAIT
        LOAD    NP1F                            ;Transition for hardware

        WAIT
        LOAD    NP2F

        WAIT
        LOAD    NP1F | RTP | SET_B | CUE ! PIXTIME_NP ;Acquire first A pixel

        WAIT
        LOAD    NP2F | LTP | SET_B | CUE ! SEC_CUE ;Acquire first B pixel

        LDCNTRA SGROUPS - 1       ! SM_SGROUPS
                           
RCSMXUB WAIT
        LOAD    NP1F | ITP | CUE  ! PIXTIME_NP  ;Get the data points.
        WAIT
        LOAD    NP2F | DTP | CUE  ! SEC_CUE
        JUNTILA RCSMXUB

        WAIT
        LOAD    TPS      
        WAIT                                  ;Trash pixel and flush pipe-line
        LOAD    TPS | DPP                     ;Point DMA to next track

        LDCNTRB SERIAL1            ! S_IGNORE_END

RCSMXUC WAIT                                  ;Ignore trailing shift reg.
        LOAD    TP | RS_B
        JUNTILB RCSMXUC

        RETURN

;**************************************************************************
;*                                                                        *
;* Routine: RCSRDXU                                                       *
;* Purpose: Read serial register for classic mode; uniform points, dX > 1 *
;*                                                                        *
;**************************************************************************

RCSDXU  FC_BLOCK                  ! UCSLICE_OUT_DX
        LDCNTRA SERIAL0 - 1       ! S_IGNORE_START ;Offset to start of track

RCSDXUA WAIT                                    ;Ignore leading shift reg.
        LOAD    TP
        JUNTILA RCSDXUA

        WAIT
        LOAD    NP1F                            ;Transition for hardware

        WAIT
        LOAD    NP2F

        LDCNTRB SDELTA            ! Y_DELTA     ;Get first group

        WAIT                                    ;Dump pixels in group
        LOAD    FLUSH

        JUNTILB RCSDXUB                         ;Subtract one!

RCSDXUB WAIT
        LOAD    DPXS

        JUNTILB RCSDXUC

        GOTOB   RCSDXUE

RCSDXUC WAIT
        LOAD    DPXS

        JUNTILB RCSDXUD

        GOTOB   RCSDXUE

RCSDXUD WAIT
        LOAD    DPX
        JUNTILB RCSDXUD

RCSDXUE WAIT
        LOAD    NP1F | RTP | SET_B | CUE ! PIXTIME_NP ;Acquire first A pixel

        WAIT
        LOAD    NP2F | LTP | SET_B | CUE ! SEC_CUE ;Acquire first B pixel

        LDCNTRA SGROUPS - 1       ! SM_SGROUPS
                           
RCSDXUF LDCNTRB SDELTA            ! Y_DELTA     ;Get remaining groups

        WAIT                                    ;Dump pixels in group
        LOAD    FLUSH

        JUNTILB RCSDXUG                         ;Subtract one!

RCSDXUG WAIT
        LOAD    DPXS

        JUNTILB RCSDXUX

        GOTOB   RCSDXUH

RCSDXUX WAIT
        LOAD    DPXS

        JUNTILB RCSDXUY

        GOTOB   RCSDXUH

RCSDXUY WAIT
        LOAD    DPX
        JUNTILB RCSDXUY

RCSDXUH WAIT
        LOAD    NP1F | ITP | CUE  ! PIXTIME_NP  ;Get the data points.
        WAIT
        LOAD    NP2F | DTP | CUE  ! SEC_CUE
        JUNTILA RCSDXUF

        WAIT
        LOAD    TPS      
        WAIT                                  ;Trash pixel and flush pipe-line
        LOAD    TPS | DPP                     ;Point DMA to next track

        LDCNTRB SERIAL1           ! S_IGNORE_END

RCSDXUI WAIT                                  ;Ignore trailing shift reg.
        LOAD    TP | RS_B
        JUNTILB RCSDXUI

        RETURN

        INCLUDE 'ALCOMMON.ASC'  ;Remaining code common to all detectors
