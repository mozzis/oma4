Program translate;
{ This program will convert a set of DOS OMA4 data files into ASCII format
and unlike the files-translate utility within the OMA4000 program allows
the use of wildcards (? & *) in the input file specification. 

Requires:-*OMA4000 version 3.0 or later (may work with earlier versions)
          *Sufficient space in the temporary file location (set by the
           DOS environment command SET TMP=...) to allow the curve
           directory space to load the largest OMA4 data file.
          *Sufficient hard disk space to store the converted files.
          *Tested with MSDOS 5.0 Program relies on the structure of the ASCII
           text generated by the DOS DIR command.

Date:-     2nd March 1994
Author:-   Richard Burdett, EG&G Instruments, Wokingham, Berks, RG11 2GY, UK.
Tel:-      +734 773003
Fax:-      +734 773493

Versions:- 1.0 New Issue 2nd March 1994
----------------------------------------------------------------------------}

var dir                                                  :text;
    cmd_string, name_file, extn, full_name, out_name, 
    out_extn, input_file, incharc, incharw               :string;
    s, delayt, waveln                                    :integer;
    input_file_a                                         :array[12] of byte;
    cmd_string_a                                         :array[33] of byte;

procedure vdelay; {produces variable delay; with given 2500 a 50MHz 486}
begin             {computer, delayT is about in seconds                }
 for t:= 1 to (2500 * delayt) do
  begin
  end;
end;

procedure convert; {executes the file translation}
begin
 full_name:=name_file+'.';
 full_name:=full_name+extn;
 writeln();
 write('loading ',full_name,';please wait...');
 load_file_curves(full_name,0,-1,cs[0],0,0); {loads specified file to CS[0]}
 out_extn:= 'ASC';   
 out_name:=name_file;
 out_name:=out_name+out_extn;
 writeln();
 write('converting ',full_name, ' to ',out_name,'; please wait...');
 save_file_curves(out_name,cs[0],0,cs[0].count,0,waveln);
 del_curve_set(cs[0]);                       {clears CS[0]}
end;

procedure get_dir; {gets the directory listing of files matching input }
begin              {filespec and writes it to DIRECTRY.ASC in current  }
 input_file_a:=input_file; {directory, so the macro can find which     } 
 writeln();                {files to convert                           }
 cmd_string_a[0]:='d';
 cmd_string_a[1]:='i';  
 cmd_string_a[2]:='r';  
 cmd_string_a[3]:=' ';  
 for s:= 0 to (strlen(input_file)) do 
 begin
  cmd_string_a[(4+s)]:= input_file_a[s];
 end;
 cmd_string_a[strlen(input_file)+4]:=' ';
 cmd_string_a[strlen(input_file)+5]:='>'; 
 cmd_string_a[strlen(input_file)+6]:=' ';   
 cmd_string_a[strlen(input_file)+7]:='d'; 
 cmd_string_a[strlen(input_file)+8]:='i'; 
 cmd_string_a[strlen(input_file)+9]:='r'; 
 cmd_string_a[strlen(input_file)+10]:='e'; 
 cmd_string_a[strlen(input_file)+11]:='c'; 
 cmd_string_a[strlen(input_file)+12]:='t'; 
 cmd_string_a[strlen(input_file)+13]:='r'; 
 cmd_string_a[strlen(input_file)+14]:='y'; 
 cmd_string_a[strlen(input_file)+15]:='.'; 
 cmd_string_a[strlen(input_file)+16]:='a'; 
 cmd_string_a[strlen(input_file)+17]:='s'; 
 cmd_string_a[strlen(input_file)+18]:='c'; 
 cmd_string:=cmd_string_a;
 doscmd(cmd_string);
end;

begin { main program starts here }
 writeln();
 write('Multiple file translation routine OMA4 -> ASCII');
 delayt:=2; {2 second delay}
 vdelay();
 writeln();
 write('Please enter source filename<s>; * & ? allowed ');
 readln(input_file);
 writeln();
 write('convert with wavelength values <Y/N>? ');
 readln(incharw);
 write('single or multiple columns <S/M>? ');
 readln(incharc);
 if ((incharw = 'Y') or (incharw = 'y')) then waveln:= 4 else waveln:= 3; 
 if ((incharc = 'M') or (incharc = 'm')) then waveln:= waveln + 2;  
 get_dir(); {create the DIRECTRY.ASC file}
 assign(dir,'c:\oma4000\directry.asc');
 reset(dir);
 readln(dir,name_file); {these lines skip the header text in DIRECTRY.ASC}
 readln(dir,name_file);
 readln(dir,name_file);
 repeat      {following executes until there are no more files to convert}
  begin
  writeln();
  read(dir,name_file);
  readln(dir,extn);
  {following tests that string read from DIRECTRY.ASC is actually a
  filename; when it isn't there are no more files to convert}
  if ((extn <>'file(s)') and (extn <> '')) then convert();
 end;
 until ((extn = 'file(s)') or (extn = '')); 
 close(dir);
 writeln();
 write('Finished!');
 delayt:=2;
 vdelay();
 writeln();
end. 
{end of macro program--------------------------------------------------------}
